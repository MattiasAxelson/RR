using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Forms;
using Microsoft.Samples.Kinect.WpfViewers;
using Microsoft.Kinect;
using Coding4Fun.Kinect.Wpf;
using System.Diagnostics;

namespace KinectCursorController
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        private const float ClickThreshold = 0.33f;

        private const float ClickHoldingRectThreshold = 0.05f;
        private const int ClickHoldingTimeThreshold = 2000;
        private bool ClickHolding = false;
        private Rect ClickHoldingLastRect = new Rect();
        private float ClickHoldingLastTime;
        private float ClickHoldingThisTime;
        private Stopwatch ClickHoldingTimer;
        private int ClickHoldingTimerDuration;

        private const float SkeletonMaxX = 0.60f;
        private const float SkeletonMaxY = 0.40f;
        private NotifyIcon _notifyIcon = new NotifyIcon();

        public MainWindow()
        {
            InitializeComponent();

            // create tray icon
            _notifyIcon.Icon = new System.Drawing.Icon("CursorControl.ico");
            _notifyIcon.Visible = true;
            _notifyIcon.DoubleClick += delegate
            {
                this.Show();
                this.WindowState = WindowState.Minimized;
                this.Focus();
            };

            ClickHoldingTimer = new Stopwatch();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            kinectSensorChooser.KinectSensorChanged += new DependencyPropertyChangedEventHandler(kinectSensorChooser_KinectSensorChanged);
        }


        private void Window_StateChanged(object sender, EventArgs e)
        {
            if (WindowState == WindowState.Minimized)
            {
                this.Hide();
            }
        }


        private void Window_Closed(object sender, EventArgs e)
        {
            // shut down the Kinect device
            _notifyIcon.Visible = false;

            if (kinectSensorChooser.Kinect != null)
            {
                kinectSensorChooser.Kinect.Stop();
            }

        }

        void kinectSensorChooser_KinectSensorChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            KinectSensor old = (KinectSensor)e.OldValue;

            StopKinect(old);

            KinectSensor sensor = (KinectSensor)e.NewValue;

            if (sensor == null)
            {
                return;
            }

            TransformSmoothParameters parameters = new TransformSmoothParameters();
            parameters.Smoothing = 0.7f;
            parameters.Correction = 0.3f;
            parameters.Prediction = 0.4f;
            parameters.JitterRadius = 1.0f;
            parameters.MaxDeviationRadius = 0.5f;

            sensor.SkeletonStream.Enable(parameters);
            sensor.ColorStream.Enable(ColorImageFormat.RgbResolution640x480Fps30);
            sensor.DepthStream.Enable(DepthImageFormat.Resolution320x240Fps30);

            sensor.AllFramesReady += new EventHandler<AllFramesReadyEventArgs>(sensor_AllFramesReady);
            try
            {
                sensor.Start();
            }
            catch (System.IO.IOException)
            {
                //another app is using Kinect
                kinectSensorChooser.AppConflictOccurred();
            }
        }


        void sensor_AllFramesReady(object sender, AllFramesReadyEventArgs e)
        {
            sensor_DepthFrameReady(e);
            sensor_SkeletonFrameReady(e);
        }


        void sensor_DepthFrameReady(AllFramesReadyEventArgs e)
        {
            // if the window is displayed, show the depth buffer image
            if (this.WindowState == WindowState.Normal)
            {
                using (DepthImageFrame depthFrame = e.OpenDepthImageFrame())
                {
                    if (depthFrame == null)
                    {
                        return;
                    }

                    video.Source = depthFrame.ToBitmapSource();
                }

            }
        }


        void sensor_SkeletonFrameReady(AllFramesReadyEventArgs e)
        {

            using (SkeletonFrame skeletonFrameData = e.OpenSkeletonFrame())
            {
                if (skeletonFrameData == null)
                {
                    return;
                }

                Skeleton[] allSkeletons = new Skeleton[skeletonFrameData.SkeletonArrayLength];

                skeletonFrameData.CopySkeletonDataTo(allSkeletons);

                foreach (Skeleton sd in allSkeletons)
                {
                    // the first found/tracked skeleton moves the mouse cursor
                    if (sd.TrackingState == SkeletonTrackingState.Tracked)
                    {
                        // make sure both hands are tracked
                        if (sd.Joints[JointType.HandLeft].TrackingState == JointTrackingState.Tracked 
                            //&& sd.Joints[JointType.HandRight].TrackingState == JointTrackingState.Tracked
                        )

                        {
                            int cursorX, cursorY;

                            // get the left and right hand Joints
                            Joint jointRight = sd.Joints[JointType.HandRight];
                            //Joint jointLeft = sd.Joints[JointType.HandLeft];
             

                            // scale those Joints to the primary screen width and height
                            Joint scaledRight = jointRight.ScaleTo((int)SystemParameters.PrimaryScreenWidth, (int)SystemParameters.PrimaryScreenHeight, SkeletonMaxX, SkeletonMaxY);
                            //Joint scaledLeft = jointLeft.ScaleTo((int)SystemParameters.PrimaryScreenWidth, (int)SystemParameters.PrimaryScreenHeight, SkeletonMaxX, SkeletonMaxY);

                            // figure out the cursor position based on left/right handedness
                            //if (LeftHand.IsChecked.GetValueOrDefault())
                            //{
                            //    cursorX = (int)scaledLeft.Position.X;
                            //    cursorY = (int)scaledLeft.Position.Y;
                            //}
                            //else
                            {
                                cursorX = (int)scaledRight.Position.X;
                                cursorY = (int)scaledRight.Position.Y;
                            }

                            //bool leftClick;

                            // figure out whether the mouse button is down based on where the opposite hand is
                            //if ((LeftHand.IsChecked.GetValueOrDefault() && jointRight.Position.Y > ClickThreshold) ||
                            //        (!LeftHand.IsChecked.GetValueOrDefault() && jointLeft.Position.Y > ClickThreshold))
                            //    leftClick = true;
                            //else
                            //leftClick = false;

                            bool leftClick = CheckForClickHold(cursorX, cursorY);

                            //Status.Text = cursorX + ", " + cursorY + ", " + leftClick;
                            //Status.Text = cursorX + ", " + cursorY;
                            NativeMethods.SendMouseInput(cursorX, cursorY, (int)SystemParameters.PrimaryScreenWidth, (int)SystemParameters.PrimaryScreenHeight, leftClick);
                            
                            return;
                        }
                    }
                }
            }


        }


        private bool CheckForClickHold(int x, int y)
        {
            var screenwidth = (int)SystemParameters.PrimaryScreenWidth;
            var screenheight = (int)SystemParameters.PrimaryScreenHeight;
            var clickwidth = (int)(screenwidth * ClickHoldingRectThreshold);
            var clickheight = (int)(screenheight * ClickHoldingRectThreshold);

            Rect newClickHold = new Rect(x - clickwidth, y - clickheight, clickwidth * 2, clickheight * 2);

            if (ClickHoldingLastRect != Rect.Empty)
            {
                if (newClickHold.IntersectsWith(ClickHoldingLastRect))
                {
                    if ((int)ClickHoldingTimer.ElapsedMilliseconds > ClickHoldingTimeThreshold)
                    {
                        ClickHoldingTimer.Stop();
                        ClickHoldingLastRect = Rect.Empty;
                        return true;
                    }
                    else
                    {
                        if (!ClickHoldingTimer.IsRunning)
                        {
                            ClickHoldingTimer.Reset();
                            ClickHoldingTimer.Start();
                        }
                        return false;
                    }
                }
                else
                {
                    ClickHoldingTimer.Stop();
                    ClickHoldingLastRect = newClickHold;
                    return false;
                }
            }
            else
            {
                ClickHoldingLastRect = newClickHold;
                if (!ClickHoldingTimer.IsRunning)
                {
                    ClickHoldingTimer.Reset();
                    ClickHoldingTimer.Start();
                }
                return false;
            }


        }



        private void StopKinect(KinectSensor sensor)
        {
            if (sensor != null)
            {
                if (sensor.IsRunning)
                {
                    sensor.Stop();
                    sensor.AudioSource.Stop();
                }
            }
        }
    }
}
